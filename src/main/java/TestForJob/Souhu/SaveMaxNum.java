package TestForJob.Souhu;

import java.util.Scanner;

/**
 * 给定一个十进制的正整数number，选择从里面去掉一部分数字，希望保留下来的数字组成的正整数最大。
 * n (0-5000)
 * @author moci
 * @create 2018-02-05 3:27 PM
 **/
public class SaveMaxNum {
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        String n = "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999995937964129921607357132265519107704102467900937555891830378946746315266084557640550172690929746484468448583069683493562132073466384223917646022394039154243125608490067989168620834777451419008577021854484993472062274422614630226718819370865349260137117341658437414823857848816373229256603836083443740020840781809736864255426600542515410514486562505810367155631244790306938650811435187403471429123413036969771565312088002290618646997311287918677438565993322362470649532795283830704957221121648384519056751393014199714534658135123156227433731049501816601501185933156605982194817652374783658865373559591240050588877478326674036632128577101207162703412741947371011335897997138961526584677006220566851919465911246252243942202479208623350366136111569384086677330330011566993357846325915149899038584727962711741600722207268639167163733946006660194848653036919236556830797594131749188828298329226956827124586753443904247012473614987977124771499932401159856553706829365780763937723995117031898961381211163888615228865338380951327042287000176104628523460015142692289878809637051717994372110224009569051457734888960424190715170527558544714720410241481103693605839879819002609048820605200803097436832999781339424435455561551311405429198754361593781337760981318445214583228322916704621592549254838038665876567491007786535271729978884086318828751505595346946097735447372725630283711239710927984824777266626747261099123523600146650272289527515749716507551597679508581511196580236622528545522299583557060255168056701923143863341244742891629781837807727469602066479850346150357557385047913360425308975137153772223374295966581234368054018204700500721885770509186204638298910933713420469611064281151721630527180789181197038393214084475658139925888081749027971082687921319184863163472679381652848523151817404362687827993641228927764030919298326411477115789006222396355575395354479612695492105867413275627384063970968226213409953732215144641143100467473303719585292659684018744979260438915191179094608183697701803408085573848229338471257151375684645922828284133940901356712348565230854996426426459631205547931013609919517861280106449946853939335995876650418538001225003939923734784336648135792696037637712119230884149582982162892772689797470864222015025156964050139062428381953889671872392846198272473088564268515858496934872429211259804038332198461041126003315969170877826783411961508447923412378459888141645170477213187339061698559214419592802315579267765321632013701442236607864866647250091600007158623144646518327940236737210404840958865813979868330988579836668038650499692265480482873598459092757861459090677752615789249371546147374885778548366899936641448219122820610463090864052001191681282942277341033521177446507373945781093405803282185054021499020990369887129917152011454486230401025987354768087266036407046784229991211989499973456618154799250648228773151603105886514843892643578868195816406541776600028838799527418251931992073929727552120781717597712619098678424623650745059169465020912170483663552139306870048845293848548682534614533388765283009359002922174350606022428450230313496938546499876989279234666403364259907489111818979429440234476819669908209663895577500677073322276637187091996616872884742516586319909227986550646930231199786670521954048698710407428726191844770953314229335557705365086074440311731716319802426629387569615666071090893290173655585460728819337762583714192826814187905598099883733341410277052671318843263367020259994385095864310287433412255575563092537072563088385365225558177328516982777498853234893987622765820851994461158673441293037184322558068704826079567165801417633150702897589327444275431558348248701796041332358906660897967424236968827488269994555622269279732456075146904058178651184356443214227126465756835852884208815995633491486020238408063115594485913841731866866316190361636815419986024256300680798443694665808160312290316785403972690375195081437626090195024101698823917855332410495571995819881549905433644188842315714614465469418108430090443553939490054291645436964626575365080025301394620489428046835231151107158733101674920519332496008121547134000497320043629518911293753889100768861415547839170125130204448131762910188246276470329580871336755606869235112472779171425627695842073098036830743801738651696264876468936993066792357326051263806796693941318804932446533817869930797781441180728459263098611546847261259780997979575449716776701192083062659762664129301329952481111448911709670892270212982389202747863365733008019605645798962040801391699890281207729763429839569035558262284710153588191711866449918436595991069818218023625966665914027838642757138477782621095912098668258690789885142038676596781161950603816582546620732640914054727605670530888558448269216091763729450832797938453478204551700369874352916883527813555016245842048096615086191090578610988083376778790432297654625646226481509102496497563291213176008926429203064635920216290300386967271216637453818727952842752404520431741985968828192581527360185720375872385451786304701221179606122522814189716069287836420749220528044463073708963489357564374198583950774856851316908227709128090645311274316505448433656522050724835928714198813759267944417470421960139568780899308750503543389803009733374357325720043153522478284582274925782005659730706631404517273547462660209250636866175424553621104720105524645624928830991324093926670013514135799769117312312581177821258179004043123380690365462632157406212016584492359087999959880829805989425620526727866734724442731706184309577595278612407505170049852614143691546329142111152469704115307560720789186577690208792589481163587545867333006567551166449240350838467605720526854874857542480311652123056178365321278676553483123039092039517748122991265199650435550217203297861918224573660918802888534938161510431582015859452971694562936397899933076377175648097227070778856881002271889450515705827204589662505745836888845776961349332415737134838986095856705303162202090793223861692743089854834390984854377341794612380531374013997876823072077856903661566817928062841798453620501544943418006788453009684970978946473888800823247327317552349395674494574833260794825880877120190151626741963268914470105695562627016299012998360468002601445189116958682675059768420477888364758506684770353508407532776500631358978465416547587477429109228496916988054822515439094537812878081265168693188949358527101395878614921448558807829300098036764131751169566346893229910061466336484344717607536175735126930151557850949105593865008505274787589626186062719546220101654113424649671959179385003075012004305066233639145148248455148545686102166296949044064911012196432928605896592574216830701471883804251558910838924424228456923766236510277364070926437358030781738";
        int k = 2;
        System.out.println(maxNum(n,k));
    }

    /**
     *
     * @param n 传入的number
     * @param k 去掉的数字个数
     * @return
     */
    static String maxNum(String n,int k){
        StringBuilder numStr = new StringBuilder(n);
        String str = "";
        long resLen = numStr.length()-k; // 输出结果的长度

        for (int i = 0; i < k; i++) {
            int len = numStr.length()-1;
            for (int j = 0; j < len; j++) {
                // 前面的比后面的数小 则剔除，然后从头再循环
                if(numStr.charAt(j)<numStr.charAt(j+1)) {
                    numStr.deleteCharAt(j);
                    break;
                }
            }
        }
        // 输出结果
        for (int i = 0; i < resLen ; i++) {
            str+=numStr.charAt(i);
        }
        return str;
    }

}
